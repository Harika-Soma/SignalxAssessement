package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"errors"
	"supplychain/graph/model"
	"supplychain/pkg/jwt"
	"supplychain/pkg/logs"
	"time"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// CreateUserLogin is the resolver for the CreateUserLogin field.
func (r *mutationResolver) CreateUserLogin(ctx context.Context, input model.UserLoginData) (string, error) {
	// This API is used to login the user to access the supply chain APIs
	var loginData *model.LoginData = new(model.LoginData)
	findData, err := r.SupplyChainStore.GetUser(input.Email, input.Password)
	if err != nil {
		logs.ErrorLogger.Println("error reading the login data from user", err)
		return "", err
	}
	loginData.ID = findData.ID
	loginData.Email = input.Email
	loginData.Password = input.Password
	loginData.LoginTime = time.Now()
	logs.InfoLogger.Println("received login data in CreateUserLogin", loginData)
	upErr := r.SupplyChainStore.UpdateUser(loginData)
	if upErr != nil {
		logs.ErrorLogger.Println("error while creating user", upErr)
		return "", upErr
	}
	tokenString, err := jwt.GenerateToken(findData.ID)
	if err != nil {
		logs.ErrorLogger.Println("token generation error", err)
		return "", err
	}
	return tokenString, nil
}

// AddInventoryItem is the resolver for the addInventoryItem field.
func (r *mutationResolver) AddInventoryItem(ctx context.Context, name string, sku string, quantity int, warehouse string) (*model.InventoryItem, error) {
	//This API is regarding the new inventory adding
	id, err := r.SupplyChainStore.AddInventoryItem(name, sku, quantity, warehouse) //adding inventory details
	if err != nil {
		logs.ErrorLogger.Println("error while adding the inventory items", err)
		return nil, err
	}
	inventory, err := r.SupplyChainStore.GetSingleInventory(id) // reading the added inventory
	if err != nil {
		logs.ErrorLogger.Println("error while reading the single inventory in AddInventoryItem", err)
		return nil, err
	}
	logs.InfoLogger.Println("Received Added Inventory Item", inventory)
	return inventory, nil
}

// UpdateInventoryItem is the resolver for the updateInventoryItem field.
func (r *mutationResolver) UpdateInventoryItem(ctx context.Context, id string, name *string, sku *string, quantity *int, warehouse *string) (*model.InventoryItem, error) {
	//This API is regarding the data validation
	if id == "" {
		logs.WarningLogger.Println("received id in update Inventory item is empty")
		return nil, errors.New("empty id from updateInventoryItem")
	}
	objID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		logs.WarningLogger.Println("converting string to objectId error in UpdateInventoryItem", err)
		return nil, err
	}
	recID, upErr := r.SupplyChainStore.UpdateInventoryItem(objID, name, sku, quantity, warehouse) //updating inventory details
	if upErr != nil {
		logs.ErrorLogger.Println("error while updating the inventory item", upErr)
		return nil, upErr
	}
	inventory, err := r.SupplyChainStore.GetSingleInventory(recID) // reading the updated inventory
	if err != nil {
		logs.ErrorLogger.Println("error while reading the single inventory in UpdateInventoryItem", err)
		return nil, err
	}
	logs.InfoLogger.Println("Received Updated Inventory Item", inventory)
	return inventory, nil
}

// DeleteInventoryItem is the resolver for the deleteInventoryItem field.
func (r *mutationResolver) DeleteInventoryItem(ctx context.Context, id string) (bool, error) {
	// This API is regarding the delete single inventory using specific id
	if id == "" {
		logs.WarningLogger.Println("received id in delete Inventory item is empty")
		return false, errors.New("empty id from deleteInventoryItem")
	}
	objID, err := primitive.ObjectIDFromHex(id) // converting the string to objectID
	if err != nil {
		logs.WarningLogger.Println("converting string to objectId error in DeleteInventoryItem", err)
		return false, err
	}
	ok := r.SupplyChainStore.DeleteInventoryItem(objID) // deleteing the inventory using id
	if !ok {
		return ok, errors.New("delete inventory is failed")
	}
	return ok, nil
}

// UpdateShipmentStatus is the resolver for the updateShipmentStatus field.
func (r *mutationResolver) UpdateShipmentStatus(ctx context.Context, id string, status string) (*model.Shipment, error) {
	// This API is regarding updating the shipment status using id and status
	if id == "" || status == "" { // checking the id and status values are empty or not
		logs.WarningLogger.Println("received id or status in update shipment status is empty")
		return nil, errors.New("empty id or status from UpdateShipmentStatus")
	}
	objID, err := primitive.ObjectIDFromHex(id) // converting the string to objectID
	if err != nil {
		logs.WarningLogger.Println("converting string to objectId error in UpdateShipmentStatus", err)
		return nil, err
	}
	recID, upErr := r.SupplyChainStore.UpdateShipmentStatus(objID, status) // updating the shipment status using the id and status
	if upErr != nil {
		logs.ErrorLogger.Println("error while updating the shipment status", upErr)
		return nil, upErr
	}
	shipment, err := r.SupplyChainStore.GetShipment(recID) // reading the shipment details
	if err != nil {
		logs.ErrorLogger.Println("error while reading the single shipment in UpdateShipmentStatus", err)
		return nil, err
	}
	logs.InfoLogger.Println("Received Updated Shipment status", shipment)
	return shipment, nil
}

// AddSupplier is the resolver for the addSupplier field.
func (r *mutationResolver) AddSupplier(ctx context.Context, name string, contactPerson string, phone string, email string) (*model.Supplier, error) {
	// This API is used to create new supplier
	id, err := r.SupplyChainStore.AddSupplier(name, contactPerson, phone, email) // creating the new suppplier with specified fields
	if err != nil {
		logs.ErrorLogger.Println("error while adding the supplier", err)
		return nil, err
	}
	supplier, err := r.SupplyChainStore.GetSingleSupplier(id) // reading the added supplier using id
	if err != nil {
		logs.ErrorLogger.Println("error while reading the single Supplier in AddSupplier", err)
		return nil, err
	}
	logs.InfoLogger.Println("Received Added Supplier", supplier)
	return supplier, nil
}

// UpdateSupplier is the resolver for the updateSupplier field.
func (r *mutationResolver) UpdateSupplier(ctx context.Context, id string, name *string, contactPerson *string, phone *string, email *string) (*model.Supplier, error) {
	// This API is used to update the specific supplier using id
	if id == "" { // checking whether the id is empty string or not
		logs.WarningLogger.Println("received id in update Supplier is empty")
		return nil, errors.New("empty id from UpdateSupplier")
	}
	objID, err := primitive.ObjectIDFromHex(id) // converting the id from string to objectID
	if err != nil {
		logs.WarningLogger.Println("converting string to objectId error in UpdateSupplier", err)
		return nil, err
	}
	recID, upErr := r.SupplyChainStore.UpdateSupplier(objID, name, contactPerson, phone, email) // updating the supplier
	if upErr != nil {
		logs.ErrorLogger.Println("error while updating the supplier in UpdateSupplier", err)
		return nil, upErr
	}
	supplier, err := r.SupplyChainStore.GetSingleSupplier(recID) // reading the supplier details using id
	if err != nil {
		logs.ErrorLogger.Println("error while reading the single Supplier in UpdateSupplier", err)
		return nil, err
	}
	logs.InfoLogger.Println("Received Updated Supplier", supplier)
	return supplier, nil
}

// DeleteSupplier is the resolver for the deleteSupplier field.
func (r *mutationResolver) DeleteSupplier(ctx context.Context, id string) (bool, error) {
	// This API is used to delete the supplier
	if id == "" { // checking whether the id is empty string or not
		logs.WarningLogger.Println("received id in delete Supplier is empty")
		return false, errors.New("empty id from DeleteSupplier")
	}
	objID, err := primitive.ObjectIDFromHex(id) // converting the id from string to objectID
	if err != nil {
		logs.WarningLogger.Println("converting string to objectId error in DeleteSupplier", err)
		return false, err
	}
	ok := r.SupplyChainStore.DeleteSupplier(objID) // deleting the specific supplier using id
	if !ok {
		return ok, errors.New("delete supplier is failed")
	}
	return ok, nil
}

// InventoryItems is the resolver for the inventoryItems field.
func (r *queryResolver) InventoryItems(ctx context.Context, limit int, offset int) ([]*model.InventoryItem, error) {
	// This API is used to read all the invetory items with a limit and offset or skip
	inventoryData, err := r.SupplyChainStore.GetInventoryItems(int64(limit), int64(offset)) // reading all the iventory items using limit and skip
	if err != nil {
		logs.ErrorLogger.Println("error while reading the inventory items", err)
		return nil, err
	}
	logs.InfoLogger.Println("Received inventory data", inventoryData)
	return inventoryData, nil
}

// Shipment is the resolver for the shipment field.
func (r *queryResolver) Shipment(ctx context.Context, id string) (*model.Shipment, error) {
	// This API is  used to read the single Shipment details
	objID, err := primitive.ObjectIDFromHex(id) // converting the id from string to objectID
	if err != nil {
		logs.WarningLogger.Println("error converting the id from string to objectID", err)
	}
	shipmentData, err := r.SupplyChainStore.GetShipment(objID) // reading the single shipment data using id
	if err != nil {
		logs.ErrorLogger.Println("error while reading the shpiment data", err)
		return nil, err
	}
	logs.InfoLogger.Println("Received shipment data", shipmentData)
	return shipmentData, nil
}

// Suppliers is the resolver for the suppliers field.
func (r *queryResolver) Suppliers(ctx context.Context) ([]*model.Supplier, error) {
	// This API is used to read all the suppliers
	supplierData, err := r.SupplyChainStore.GetSuppliers() // reading all the suppliers
	if err != nil {
		logs.ErrorLogger.Println("error while reading the suppliers", err)
		return nil, err
	}
	logs.InfoLogger.Println("Received suppliers data", supplierData)
	return supplierData, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
